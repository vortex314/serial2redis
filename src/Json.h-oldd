#ifndef _LIMERO_JSON_H_
#define _LIMERO_JSON_H_

#include <stdint.h>

#include <string>
#include <unordered_map>
#include <vector>
typedef enum {
  JS_UNDEFINED,
  JS_NULL,
  JS_NUMBER,
  JS_STRING,
  JS_BOOLEAN,
  JS_ARRAY,
  JS_OBJECT,
  JS_BINARY
} JsonType;

class Json {
  JsonType _type = JS_NULL;
  friend class JsonObject;
  friend class JsonArray;
  union {
    double _number;
    bool _boolean;
    std::string* _string;
    std::unordered_map<std::string, Json>* _object;
    std::vector<Json>* _array;
  };

 public:
  Json();
  ~Json();
  Json(double);
  Json(const char*);
  Json(bool);
  Json& array();
  Json& object();
  Json parse(std::string);
  Json& operator[](const char* field);
  Json& operator[](int idx);
  JsonType type();
  void type(JsonType);
  void operator=(int x);
  void operator=(const char*);
  void operator=(bool b);
  void operator=(double);

  bool isArray();
  bool isObject();
  bool isNumber();
  bool isString();
  size_t size();
  std::string string();
  bool string(std::string&);
  int integer();
  double number();
  std::string serialize();

 private:
};

#endif